<?php

namespace AppBundle\Entity\Repository;

use AppBundle\Entity\Cleaning;
use Doctrine\ORM\EntityRepository;

/**
 * CleaningRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CleaningRepository extends EntityRepository
{

    /**
     * @param \DateTime $date
     * @param bool $create
     * @return Cleaning
     */
    public function findTeam(\DateTime $date = null, $create = false)
    {
        if ($date === null) {
            $date = new \DateTime('now');
        }

        $cleaning = $this->findOneBy(array('date' => $date));
        if (! is_object($cleaning) && $create) {
            $users = $this->getEntityManager()->getRepository('AppBundle:User')->findTimeToCleanUsers();
            $primary = $users[0];
            $backup = $users[1];

            $cleaning = new Cleaning();
            $cleaning
                ->setDate($date)
                ->setUser($primary)
                ->setBackup($backup)
            ;

            $primary->addCleaning();

            $this->getEntityManager()->persist($primary);
            $this->getEntityManager()->persist($cleaning);
            $this->getEntityManager()->flush();
        }

        return $cleaning;
    }

    /**
     * @return array
     */
    public function findTopscore()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        //$query->addSelect('primary');
        //$query->addSelect('backup');
        $query->addSelect('SUM(points.point) / COUNT(points.id) as t');
        $query->addSelect('cleaning as c');
        $query->from('AppBundle:Cleaning', 'cleaning');
        $query->leftJoin('cleaning.points', 'points');
        //$query->innerJoin('cleaning.user', 'primary', 'WITH', 'primary.id = cleaning.user');
        //$query->innerJoin('cleaning.backup', 'backup', 'WITH', 'backup.id = cleaning.backup');
        $query->andWhere('cleaning.date < :day');
        $query->addGroupBy('cleaning.id');
        $query->setParameter(':day', date_create()->sub(new \DateInterval('P1D')), \Doctrine\DBAL\Types\Type::DATETIME);
        $results = $query->getQuery()->getResult();

        $users = [];
        foreach($results as $result) {
            /** @var Cleaning $cleaning */
            $cleaning = $result['c'];
            $total = $result['t'];

            if (isset($users[$cleaning->getUsedUser()->getId()])) {
                $u = &$users[$cleaning->getUsedUser()->getId()];
                $u['points'] += $total;
                $u['cleans'] += 1;
                $u['total'] = (float) sprintf('%01.2f', $u['points'] / $u['cleans']);
            } else {
                $users[$cleaning->getUsedUser()->getId()] = [
                    'user' => $cleaning->getUsedUser(),
                    'cleans' => 1,
                    'points' => $total,
                    'total' => (float) sprintf('%01.2f', $total / 1)
                ];
            }
        }

        usort($users, function($a, $b) {
            if ($a['total'] === $b['total']) return 0;
            return ($a['total'] < $b['total'] ? 1 : -1);
        });

        return $users;
    }

}
